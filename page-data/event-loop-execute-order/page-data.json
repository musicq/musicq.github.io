{"componentChunkName":"component---src-templates-blog-post-js","path":"/event-loop-execute-order/","result":{"data":{"site":{"siteMetadata":{"title":"MusicQ"}},"markdownRemark":{"id":"b499800c-bda4-578e-a9ed-b3561a01a636","excerpt":"…","html":"<p>很多文章都在讲事件循环，但是大部分只停留在概念上，真正遇到考题可能就晕了。这篇文章就是想从实战角度，体验一下什么是事件循环。</p>\n<p>下面是一道很常见的面试题，我将它稍微改造变成了一个很复杂异步代码例子，你能看出他的运行结果吗？</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a1 start'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a1 end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a2 start'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'a2 end'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a3 start'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'a3 end'</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script start'</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'setTimeout'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 1'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 2'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 3'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'promise 4'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script end'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这题乍一看很乱，但是别忘了事件循环其实不过就是栈和队列，清楚了栈和队列我们就能很轻易的解决这个问题了，还要记得代码是一块一块执行的。</p>\n<p>做题之前，先明确几个概念。</p>\n<p>事件循环分为三个部分，暂且把它们记成 Task, Micro 和 Macro。</p>\n<ul>\n<li>Task: 主栈，任何代码都是在主站内完成执行的</li>\n<li>Micro: 微队列，用来保存 Promise 或 Mutation Observer 的任务</li>\n<li>Macro: 宏队列，用来保存 setTimeout 等宏任务</li>\n</ul>\n<p>它们的执行顺序遵循如下原则：</p>\n<ol>\n<li>如果 Task 有任务，则循环执行栈(FILO)内任务</li>\n<li>如果 Task 没有任务，从 Micro 队列中取出一个任务，放到主栈执行，继续 1 步骤</li>\n<li>如果主栈和 Micro 队列都没有任务，执行 Macro 队列的第一个任务，回到 1 步骤</li>\n</ol>\n<p>下面先来看几个特定的例子</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>很多人第一直觉是 Promise 内的任务是 Micro，所以应该先输出 3，再输出 1，最后输出 2，这个认知是不正确的。</p>\n<p><code class=\"language-text\">new Promise()</code> 内的代码其实是同步执行的，并不会将其放入到 Micro 队列，而是遇到 resolve 或者 reject 时，才开始在 Micro 中放入任务。</p>\n<p>所以他的运行规则如果下</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>consolle.log(1)</td>\n<td>resolve()</td>\n<td></td>\n</tr>\n<tr>\n<td>consolle.log(3)</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>执行完 Task 栈内的任务后，开始执行 resolve 的任务</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>resolve()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>resolve 的任务就是 then 内的 callback</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>console.log(2)</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>所以这段代码的结果就是</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n3\n2</code></pre></div>\n<p>在此基础上，可以稍作一点变形，会跟让人发懵。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里看到 Promise 主体内的代码在 resolve 之后还有一个 <code class=\"language-text\">console.log(4)</code>，关键最后还有一个 <code class=\"language-text\">reject</code>。</p>\n<p>其实这些都是烟雾弹，我们只要记住几个原则：</p>\n<ol>\n<li>代码是一块一块执行的</li>\n<li>Promise 的状态一旦 fullfilled，就不可更改</li>\n</ol>\n<p>所以上面的代码结果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n4\n3\n2\n// 5 不会被输出，因为 promise 已经被 resolve 了</code></pre></div>\n<p>下面再来看一个 async/await 的例子</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a1 start'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">const</span> r <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a1 end'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a2 start'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token string\">'a2 end'</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这题的输出可能有点反直觉，但是只要遵循上面给出的描述，就能很容易的解决。</p>\n<p>可以考虑将 async/await 转换成 Promise 这种比较熟悉的形式</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a1 start'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">r</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a1 end'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">a2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a2 start'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a2 end'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">a1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start'</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>由此就可能比较轻易的看出来他的运行逻辑了。</p>\n<p>第一步，将任务放入主栈</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>a1()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>第二步，运行 a1，得出</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>console.log(‘a1 start’)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>a2()</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>清空主栈，输出 <code class=\"language-text\">a1 start</code>，然后将 a2 运行并入栈</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>console.log(‘a2 start’)</td>\n<td>resolve(‘a2 end’)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>清空主栈，输出 <code class=\"language-text\">a2 start</code></p>\n<p>由于 a2 中包含 resolve 属于 Micro task，将 resolve 压入到 Micro 中</p>\n<p>然后就没有可以再同步嵌套下去的任务了，可以继续往下走</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>console.log(‘start’)</td>\n<td>resolve(‘a2 end’)</td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>清空主栈，遇到 console.log(‘start’) 时，输出 <code class=\"language-text\">start</code>。</p>\n<p>最后主栈已经没有任何任务存在，这时就需要将 Micro 队列的任务出队了</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>resolve(‘a2 end’)</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>这里的 <code class=\"language-text\">resolve('a2 end')</code> 就可以解析成下面的方法</p>\n<table>\n<thead>\n<tr>\n<th>Task</th>\n<th>Micro</th>\n<th>Macro</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>(r) => {console.log(r); console.log(‘a1 end’)}</td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<p>其中 r 就是 resolve 的值 ‘a2 end’，所以会输出</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a2 end\na1 end</code></pre></div>\n<p>所以最终结果就为</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">a1 start\na2 start\nstart\na2 end\na1 end</code></pre></div>\n<p>根据上述的执行顺序，再回头看第一题的，只需要注意一点即可，即<code class=\"language-text\">Macro 需要在 Micro 都执行完成之后才继续执行</code>。</p>\n<p>得到结果如下</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">script start\na1 start\na2\na3\npromise 1\npromise 1.1\nscript end\na3 end\npromise 2\na2 end\na1 end\npromise 3\nerr\nsetTimeout</code></pre></div>","frontmatter":{"title":"Event loop 的执行顺序","date":"June 28, 2021","description":"你真的了解事件循环的执行顺序吗？"}}},"pageContext":{"slug":"/event-loop-execute-order/","previous":{"fields":{"slug":"/how-to-handle-error-gracefully/"},"frontmatter":{"title":"How to handle errors gracefully?"}},"next":null}},"staticQueryHashes":["63159454","877452824"]}