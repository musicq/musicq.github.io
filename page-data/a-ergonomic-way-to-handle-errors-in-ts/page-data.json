{"componentChunkName":"component---src-templates-blog-post-js","path":"/a-ergonomic-way-to-handle-errors-in-ts/","result":{"data":{"site":{"siteMetadata":{"title":"MusicQ"}},"markdownRemark":{"id":"af1244cd-47c3-5fd5-a2f5-69a0a405e17e","excerpt":"Introduction Have you ever been annoyed by encountering errors everywhere while working with JavaScript? Error handling is an essential aspect of software…","html":"<h2>Introduction</h2>\n<p>Have you ever been annoyed by encountering errors everywhere while working with JavaScript? Error handling is an essential aspect of software development, and in the JavaScript world, the most common approach to handling errors is by using <code class=\"language-text\">try/catch</code> blocks. However, this style can become cumbersome and lead to code that is harder to read and maintain, especially when dealing with asynchronous actions.</p>\n<p>In this article, we will explore a more ergonomic way to handle errors in TypeScript by leveraging a library called <code class=\"language-text\">unwrapit</code>. This library introduces a concept similar to Rust’s <code class=\"language-text\">Result</code> type, which provides a cleaner and more structured approach to dealing with errors.</p>\n<h2>The Traditional <code class=\"language-text\">try/catch</code> Approach</h2>\n<p>Let’s start by examining the traditional <code class=\"language-text\">try/catch</code> approach in JavaScript. When encountering an error, we wrap the code inside a <code class=\"language-text\">try</code> block and catch the error in the corresponding <code class=\"language-text\">catch</code> block. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{a: true}'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Uncaught SyntaxError: Expected property name or '}' in JSON</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This approach works for both synchronous and asynchronous code. For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'async error'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token comment\">// async error</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>However, when dealing with a sequence of asynchronous actions, this style can quickly become cumbersome. Consider the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">function</span> <span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">queryDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">sendRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">await</span> <span class=\"token function\">writeDB</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'ok'</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isQueryDBError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>err<span class=\"token operator\">:</span> <span class=\"token string\">'query DB error'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isSendReqError</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>err<span class=\"token operator\">:</span> <span class=\"token string\">'send request error'</span><span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">isWriteDB</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>err<span class=\"token operator\">:</span> <span class=\"token string\">'write DB error'</span><span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In this case, the <code class=\"language-text\">try/catch</code> blocks introduce additional indentation, and error handling requires manual checks and conditionals. This can make the code harder to read and maintain.</p>\n<h2>Introducing <code class=\"language-text\">unwrapit</code></h2>\n<p>To address these issues and provide a more ergonomic way of handling errors in TypeScript, we can leverage the <code class=\"language-text\">unwrapit</code> library. Inspired by Rust’s <code class=\"language-text\">Result</code> type, <code class=\"language-text\">unwrapit</code> introduces a similar concept in JavaScript.</p>\n<p>I have developed a small library called <code class=\"language-text\">unwrapit</code> that brings the Rust <code class=\"language-text\">Result</code> type into JavaScript. You can find the library on GitHub at <a href=\"https://github.com/musicq/unwrapit\">https://github.com/musicq/unwrapit</a>.</p>\n<h2>Using <code class=\"language-text\">unwrapit</code> for Error Handling</h2>\n<p>Let’s explore how to use <code class=\"language-text\">unwrapit</code> to handle errors more ergonomically. First, we need to wrap our functions that might produce errors using the <code class=\"language-text\">wrap</code> function provided by <code class=\"language-text\">unwrapit</code>.</p>\n<p>As an example, let’s take the <code class=\"language-text\">parseJson</code> function we discussed earlier:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>wrap<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unwrapit'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> parseJsonWrapper <span class=\"token operator\">=</span> <span class=\"token function\">wrap</span><span class=\"token punctuation\">(</span>parseJson<span class=\"token punctuation\">)</span></code></pre></div>\n<p>By wrapping the <code class=\"language-text\">parseJson</code> function, we transform its return type into a <code class=\"language-text\">Result&lt;any, unknown></code>, where <code class=\"language-text\">any</code> represents the type of the value returned on success, and <code class=\"language-text\">unknown</code> represents the type of the error.</p>\n<h2>Handling Errors with <code class=\"language-text\">unwrap</code> and <code class=\"language-text\">ok</code>/<code class=\"language-text\">err</code> Functions</h2>\n<p>When using a function wrapped with <code class=\"language-text\">unwrapit</code>, it is recommended to first check the result using conditional statements. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parseJsonWrapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{a: true}'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>result<span class=\"token punctuation\">.</span>ok<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbzgdygQzHAvnAZlCEOAcgFcA7VDYGYgKDtwoGMZgJy4w0oBnAUwBSvDgAoIALji8YUYOQDmASkR04cKPxikonQQGUA8gDkAdNz79xSulgZ1mHGVx4DhHAOrowYflDgAvCjeohZuIuQ2jCxsHHAgaPKiKghqcI7kzprwQWFCEV4YvlCixAhoUrKk-FjEUerAuHCiAITZphAA1ilp6hkiADb8pn4EJe2j0Dbq6tk65Gl2af0QQ6YDEAqi7QBuaAPVNksJSUpAA\">Try in TSPlayground</a></p>\n</blockquote>\n<p>In this example, we check the <code class=\"language-text\">ok</code> property of the <code class=\"language-text\">result</code> object. If it’s <code class=\"language-text\">false</code>, we know that an error occurred, and we can access the error via the <code class=\"language-text\">error</code> property. Otherwise, we can safely access the value using the <code class=\"language-text\">value</code> property.</p>\n<p>Alternatively, <code class=\"language-text\">unwrapit</code> provides the <code class=\"language-text\">unwrap</code> method, which can be used to directly extract the value from the <code class=\"language-text\">Result</code> or throw an error if an error occurred:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parseJsonWrapper</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{a: true}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// Throws an error since `{a: true}` is not a valid JSON string</span></code></pre></div>\n<p>The <code class=\"language-text\">unwrap</code> method simplifies error handling by throwing an error when an error occurs, allowing you to catch it using a <code class=\"language-text\">try/catch</code> block.</p>\n<p>Additionally, you can manually create <code class=\"language-text\">Result</code> instances using the <code class=\"language-text\">ok</code> and <code class=\"language-text\">err</code> functions provided by unwrapit. Here’s an example:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>ok<span class=\"token punctuation\">,</span> err<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'unwrapit'</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">parseJson</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">ok</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">err</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token function\">parseJson</span><span class=\"token punctuation\">(</span><span class=\"token string\">'{a: true}'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<blockquote>\n<p><a href=\"https://www.typescriptlang.org/play?#code/JYWwDg9gTgLgBAbwgawDRwKZSgXzgMyghDgHIBXAOwHcoBDMYGUgKBfyoGMZgJK4wdKAGcMAKWF8AFBABccYTCjBKAcwCUiFnDhKAnlp06oGGOSj8UUsQGUA8gDkAdIJEYZ69drh5OdGJwAFnBSGJoI3sam5vxYUKFeOjgsySycfIpwJvAAvAJCohLSpAh08krkGDik6k5UtAxS6kA\">Try in TSPlayground</a></p>\n</blockquote>\n<p>In this case, we wrap the successful value using <code class=\"language-text\">ok</code> and wrap the error using `err.</p>\n<h2>Conclusion</h2>\n<p>In this article, we explored a more ergonomic way to handle errors in TypeScript by utilizing the <code class=\"language-text\">unwrapit</code> library. By introducing a concept similar to Rust’s <code class=\"language-text\">Result</code> type, <code class=\"language-text\">unwrapit</code> provides a cleaner and more structured approach to error handling. With <code class=\"language-text\">unwrapit</code>, you can easily determine whether a function might throw errors, handle errors with conditional statements or the <code class=\"language-text\">unwrap</code> method, and create <code class=\"language-text\">Result</code> instances manually using <code class=\"language-text\">ok</code> and <code class=\"language-text\">err</code> functions.</p>\n<p>To learn more about <code class=\"language-text\">unwrapit</code> and explore its detailed usage, I encourage you to refer to the <a href=\"https://github.com/musicq/unwrapit\">README</a> on the GitHub repository.</p>\n<p>Remember, by adopting a more ergonomic error handling approach, you can make your TypeScript code more readable, maintainable, and less error-prone.</p>","frontmatter":{"title":"A More Ergonomic Approach to Handling Errors in TypeScript","date":"June 18, 2023","description":"Have you ever annoyed by the errors everywhere?"}}},"pageContext":{"slug":"/a-ergonomic-way-to-handle-errors-in-ts/","previous":{"fields":{"slug":"/node-esm-vs-cjs/"},"frontmatter":{"title":"Node ESM vs CJS"}},"next":null}},"staticQueryHashes":["63159454","877452824"]}